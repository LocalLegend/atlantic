name: 'Production: Google platform deploy'

on:
  push:
    branches: ['main']

env:
  GKE_CLUSTER: locallegend-cluster
  GKE_ZONE: asia-northeast1-a
  APP_NAME: atlantic
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  NODE_ENV: production
  RAILS_ENV: production
  HOST: locallegend.ru

jobs:
  build-assets:
    runs-on: ubuntu-latest
    env:
      ruby-version: '3.0'
    steps:
    - uses: actions/checkout@v2
    
    - name: Set up Ruby ${{ env.ruby-version }}
      uses: ruby/setup-ruby@473e4d8fe5dd94ee328fdfca9f8c9c7afc9dae5e
      with:
        ruby-version: ${{ env.ruby-version }}
        bundler-cache: true

    - name: Compile assets to prod
      run: NODE_ENV=${{ env.NODE_ENV }} bundle exec rails assets:precompile

    - name: Upload build artefact
      uses: actions/upload-artifact@v2
      with:
        name: atlantic-artefact
        path: |
          app
          bin
          chart
          config
          db
          entrypoints
          lib
          log
          public
          tmp
          .dockerignore
          Dockerfile
          Gemfile
          Gemfile.lock
          config.ru
          Rakefile
          yarn.lock
          postcss.config.js
          package.json
          package-lock.json

  publish-version:
    if: ${{ github.ref == 'refs/heads/main' }}
    outputs:
      app_version: ${{ steps.semantic.outputs.new_release_version }}
      is_new_version: ${{ steps.semantic.outputs.new_release_published }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        
      - uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Npm install
        run: npm ci

      - name: Semantic Release
        uses: cycjimmy/semantic-release-action@v2
        id: semantic
        with: 
          branches: |    
            [
              'main',
              'master', 
              'next', 
              'next-major', 
              {
                name: 'beta', 
                prerelease: true
              }, 
              {
                name: 'alpha', 
                prerelease: true
              }
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Outputs release version when a new release published
        if: steps.semantic.outputs.new_release_published == 'true'
        run: |
          echo ${{ steps.semantic.outputs.new_release_version }}
          echo ${{ steps.semantic.outputs.new_release_major_version }}
          echo ${{ steps.semantic.outputs.new_release_minor_version }}
          echo ${{ steps.semantic.outputs.new_release_patch_version }}

  build-push-docker:
    runs-on: ubuntu-latest
    needs: [publish-version, build-assets]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the Container registry
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@98669ae865ea3cffbcbaa878cf57c20bbf1c6c38
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}},value=v${{needs.publish-version.outputs.app_version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@ad44023a93711e3deb337508980b4b5e9bcdc5dc
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-gke:
    needs: [publish-version, build-push-docker]
    environment: 'production'
    runs-on: 'ubuntu-latest'
    steps:
    - uses: actions/checkout@v1

    - id: auth
      uses: google-github-actions/auth@v0
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - name: Set up cluster access
      run: gcloud container clusters get-credentials ${{ env.GKE_CLUSTER }} --zone ${{ env.GKE_ZONE }}

    - name: Deploy helm
      working-directory: chart
      run: |
        helm upgrade --install -f values.yaml ${{ env.APP_NAME }} . \
          --set app=${{ env.APP_NAME }} \
          --set host=${{ env.HOST }}  \
          --set image.tag=${{needs.publish-version.outputs.app_version}} \
          --set RAILS_ENV=${{ env.RAILS_ENV }} \
          --set AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }} \
          --set AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }} \
          --set AWS_REGION=${{ secrets.AWS_REGION }} \
          --set DYNANODB_TABLE_NAME_RUNNERS=${{ secrets.DYNANODB_TABLE_NAME_RUNNERS }} \
          --set KEYCLOAK_USER=${{ secrets.KEYCLOAK_USER }} \
          --set KEYCLOAK_PASSWORD=${{ secrets.KEYCLOAK_PASSWORD }} \
          --set MONGODB_USERNAME=${{ secrets.MONGODB_USERNAME }} \
          --set MONGODB_PASSWORD=${{ secrets.MONGODB_PASSWORD }} \
          --set POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
          --set POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
          --set POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
          --set RAILS_MASTER_KEY=${{ secrets.RAILS_MASTER_KEY }}
